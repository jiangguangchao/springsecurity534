package groovy

import com.intellij.database.model.DasTable
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

/*
 * Available context bindings:
 *   SELECTION   Iterable<DasObject>
 *   PROJECT     project
 *   FILES       files helper
 */

packageName = "com.sample;"
typeMapping = [
  (~/(?i)int/)                      : "Integer",
  (~/(?i)float|double|decimal|real/): "Double",
  (~/(?i)datetime|timestamp/)       : "java.util.Date",
  (~/(?i)date/)                     : "java.util.Date",
  (~/(?i)time/)                     : "java.util.Date",
  (~/(?i)/)                         : "String"
]

FILES.chooseDirectoryAndSave("Choose directory", "Choose where to store generated files") { dir ->
  SELECTION.filter {
      it instanceof DasTable
  }.each {
      generateJava(it, dir)
      generateMapper(it, dir)
  }
}

def generateJava(table, dir) {
  def tableName = table.getName().toString()
  def className = javaName(tableName, true)
  def fields = calcFields(table)
  new File(dir, className + ".java").withPrintWriter { out -> doGenerateJava(out, className, fields) }
}

def doGenerateJava(out, className, fields) {
  out.println "package $packageName"
  out.println ""
  out.println ""
  out.println "public class $className {"
  out.println ""
  fields.each() {
    if (it.annos != "") out.println "  ${it.annos}"
    out.println "  private ${it.type} ${it.name};"
  }
  out.println ""
  fields.each() {
    out.println ""
    out.println "  public ${it.type} get${it.name.capitalize()}() {"
    out.println "    return ${it.name};"
    out.println "  }"
    out.println ""
    out.println "  public void set${it.name.capitalize()}(${it.type} ${it.name}) {"
    out.println "    this.${it.name} = ${it.name};"
    out.println "  }"
    out.println ""
  }
  out.println "}"
}

def generateMapper(table, dir) {
    def tableName = table.getName().toString()
    def className = javaName(tableName, true)
    def mapperName = className + "Mapper"
    def fields = calcFields(table)
    new File(dir, mapperName + ".xml").withPrintWriter { out -> doGenerateMapper(out, tableName, className, mapperName, fields) }
}

def doGenerateMapper(out, tableName, className, mapperName, fields) {

    def resultName = className + "Result"

    out.println "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    out.println "<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">"
    out.println "<mapper namespace=\"$mapperName\">"
    out.println ""

    out.println "   <resultMap id=\"$resultName\" type=\"$className\" >"
    fields.each() {
        out.println "       <result column=\"${it.colName}\" property=\"${it.name}\" />"
    }
    out.println "   </resultMap>"

    out.println "   <sql id=\"colum\" >"
    fields.each() {
        def allColum = ""
        if (it == fields.last()) {
            allColum = allColum + it.colName
        } else {
            allColum = allColum + it.colName + ", "
        }
        out.println "       ${allColum}"
    }
    out.println "   </sql>"

    out.println "   <sql id=\"queryWhere\">"
    out.println "       from ${tableName}"
    out.println "       <where>"
    out.println "           <if test=\"queryData != null\">"
    fields.each() {
        out.println "               <if test=\"queryData.${it.name} != null and queryData.${it.name} != ''\">"
        out.println "                   and ${it.colName} = #{queryData.${it.name}}"
        out.println "               </if>"
    }
    out.println "           </if>"
    out.println "       </where>"
    out.println "   </sql>"

    out.println "   <select id=\"getTotalCount\" parameterType=\"BaseVo\" resultType=\"int\">"
    out.println "       select count(1) "
    out.println "       <include refid=\"queryWhere\"></include> "
    out.println "   </select>"

    out.println "   <select id=\"get${className}s\" resultMap=\"${resultName}\" parameterType=\"BaseVo\">"
    out.println "       select count(1) "
    out.println "       <include refid=\"queryWhere\"></include> "
    out.println "   </select>"

    out.println "   <insert id=\"save${className}\" parameterType=\"${className}\" >"
    out.println "       insert into ${tableName} ("
    out.println "       <trim suffixOverrides=\",\" >"
    fields.each() {
        out.println "           <if test=\"${it.name} != null\">"
        out.println "               ${it.colName},"
        out.println "           </if>"
    }
    out.println "       </trim>"
    out.println "       )"
    out.println "       values ("
    out.println "       <trim suffixOverrides=\",\" >"
    fields.each() {
        out.println "           <if test=\"${it.name} != null\">"
        out.println "               #{${it.name}},"
        out.println "           </if>"
    }
    out.println "       </trim>"
    out.println "       )"
    out.println "   </insert>"

    out.println "   <update id=\"update${className}\" parameterType=\"${className}\" >"
    out.println "       update ${tableName} set"
    out.println "       <trim suffixOverrides=\",\" >"
    fields.each() {
        out.println "           <if test=\"${it.name} != null\">"
        out.println "               ${it.colName} = #{${it.name}},"
        out.println "           </if>"
    }
    out.println "       </trim>"
    out.println "   </update>"

    out.println "</mapper>"
}

def calcFields(table) {
  DasUtil.getColumns(table).reduce([]) { fields, col ->
    def spec = Case.LOWER.apply(col.getDataType().getSpecification())
    def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value
    fields += [[
                 name : javaName(col.getName(), false),
                 colName : col.getName(),
                 type : typeStr,
                 annos: ""]]
  }
}


def javaName(str, capitalize) {

    if (str.startsWith("t_")) {
        str = str.replace("t_","")
    }
    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)
    .collect { Case.LOWER.apply(it).capitalize() }
    .join("")
    .replaceAll(/[^\p{javaJavaIdentifierPart}[_]]/, "_")
    capitalize || s.length() == 1? s : Case.LOWER.apply(s[0]) + s[1..-1]
}
